#!/bin/bash
function dark_color {
	printf "\e[37m"
}

function reset_color {
	printf "\e[0m"
}

function quit {
	dark_color
	exit $1
}

function message {
	echo -e "\e[33m"$@
	dark_color
}

function ok {
	echo -e "\e[32m"$@
	dark_color
}

function error {
	echo -e "\e[31m"$@
	dark_color
}

function show_help {
	message "Usage: grabpkg [Git URL]"
}

function download_pkg {
	url=$1
	dest=$2
	message "Downloading: "$url" to "$dest
	git clone $url $dest
	err=$?
	if [ $err -ne 0 ]; then
		error "git returned abnormal code "$err
		return 1
	fi
	return 0
}

function setup_pkg {
	dir=$1
	message "Setting up package from: "$dir
	cd $dir
	makepkg -sri
	err=$?
	if [ $err -ne 0 ]; then
		error "makepkg returned abnormal code "$err
		return 1
	fi
	return 0
}

function cleanup {
	dir=$tmpdir
	message "Cleaning up: "$dir
	rm -rf $dir
}

function handle_ctrl_c {
	cleanup
	quit 2
}

function abort {
	error "Aborting..."
	cleanup
	quit 1
}

message "Gippeumi AUR Package grabbing utility"
if [ -z $1 ]; then
	show_help
	quit 1
fi
url=$1
tmpdir=$(mktemp)
rm -rf $tmpdir	#Because git will not clone if directory already exists
download_pkg $url $tmpdir
if [ $? -ne 0 ]; then
	abort
fi
while true; do
	setup_pkg $tmpdir
	if [ $? -ne 0 ]; then
		while true; do
			message "Package setup failed. What do you want to do?"
			message "Type \"abort\" and press enter to abort setup and delete downloaded files."
			message "Type \"retry\" and press enter to try again."
			read choice
			if [ ! -z $choice ]; then
				if [ $choice == "abort" ]; then
					abort
				elif [ $choice == "retry" ]; then
					break
				else
					error "Bad choice!"
				fi
			else
				error "Bad choice!"
			fi
		done
	else
		break
	fi
done
cleanup

ok "Package setup successfully completed."

quit 0
